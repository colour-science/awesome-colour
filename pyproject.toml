[project]
name = "awesome-colour"
version = "1.0.0"
description = "Curated list of awesome colour science resources"
readme = "readme.md"
requires-python = ">=3.10,<3.14"
authors = [
    { name = "Colour Developers", email = "colour-developers@colour-science.org" },
]
maintainers = [
    { name = "Colour Developers", email = "colour-developers@colour-science.org" }
]
license = { text = "CC0" }
keywords = [
    "awesome",
    "awesome-list",
    "color",
    "color-science",
    "color-space",
    "color-spaces",
    "colorspace",
    "colorspaces",
    "colour",
    "colour-science",
    "colour-space",
    "colour-spaces",
    "colourspace",
    "colourspaces",
    "data",
    "dataset",
    "datasets"
]

dependencies = [
    "mkdocs",
    "mkdocs-material",
]

[project.urls]
Homepage = "http://awesome-colour.org/"
Repository = "https://github.com/colour-science/awesome-colour"

[tool.uv]
package = true
dev-dependencies = [
    "invoke",
    "pre-commit",
]

[tool.codespell]
ignore-words-list = "buil,socio-economic"

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
multi_line_output = 3
split_on_trailing_comma = true
use_parentheses = true

[tool.pyright]
reportMissingImports = false
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnnecessaryTypeIgnoreComment = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false

[tool.pytest.ini_options]
addopts = "--durations=5"

[tool.ruff]
target-version = "py310"
line-length = 88
select = ["ALL"]
ignore = [
    "C", # Pylint - Convention
    "C90", # mccabe
    "COM", # flake8-commas
    "ERA", # eradicate
    "FBT", # flake8-boolean-trap
    "FIX", # flake8-fixme
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib [Enable]
    "TD", # flake8-todos
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    "D200", # One-line docstring should fit on one line
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D301", # Use `r"""` if any backslashes in a docstring
    "D400", # First line should end with a period
    "I001", # Import block is un-sorted or un-formatted
    "N801", # Class name `.*` should use CapWords convention
    "N802", # Function name `.*` should be lowercase
    "N803", # Argument name `.*` should be lowercase
    "N806", # Variable `.*` in function should be lowercase
    "N813", # Camelcase `.*` imported as lowercase `.*`
    "N815", # Variable `.*` in class scope should not be mixedCase
    "N816", # Variable `.*` in global scope should not be mixedCase
    "NPY002", # Replace legacy `np.random.random` call with `np.random.Generator`
    "PGH003", # Use specific rule codes when ignoring type issues
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison, consider replacing `.*` with a constant variable
    "PYI036", # Star-args in `.*` should be annotated with `object`
    "PYI051", # `Literal[".*"]` is redundant in a union with `str`
    "PYI056", # Calling `.append()` on `__all__` may not be supported by all type checkers (use `+=` instead)
    "RUF022", # [*] `__all__` is not sorted
    "TRY003", # Avoid specifying long messages outside the exception class
    "UP038", #  Use `X | Y` in `isinstance` call instead of `(X, Y)`
]
typing-modules = ["colour.hints"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tasks.py" = ["INP"]

[tool.ruff.format]
docstring-code-format = true
